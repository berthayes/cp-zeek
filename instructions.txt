# These instructions are for creating any number of EC2 hosts running Confluent Platform and ksqlDB

# script assumes that the boto3 library can find your .aws/config and .aws/credentials files (in ~/ by default)

# 1. git clone the repo
# Do this on one host (e.g. your laptop or other EC2 host), then distribute it to additional EC2 hosts later on
git clone https://github.com/berthayes/cp-zeek.git

# Got it?  Get in there!
cd cp-zeek

# 2. Edit the config file yak_shaving.conf to reflect your AWS environment

# Make sure to change these fields:
# vm_name = Name_tag_in_AWS
# security_group_id = sg-XXXXXXXXXXXXXXX
# owner_name = 'Your Name'
# your_pem = which_aws.pem
# your_email = 'you@your.org'

# [workshop]
# workshop_name = 'your_workshop'

vim yak_shaving.conf

# Optional (recommended) - edit the create_aws_instances.py script to specify how many EC2 instances you want created.  Ideally, 1 per student.

vim create_aws_instances.py

# 3. Run create_aws_instances.py

python3 create_aws_instances.py

# Wait for completion
sleep 90
# sleep longer than that, depending on the number of systems you're spinning up
# You can check the AWS console to see when all of your hosts are up

# 4. Get IP addresses for hosts
# This will retrieve the public and private IP addresses for each host
# These will be used to centrally manage each host via scripts.

./get_private_ip_and_name.py > aws_host_info.txt

# 5. Create host lists
# This repo contains a few shell scripts that run a for i in `cat hosts.txt`; do
# kind of loops.  These are designed to distribute files and run commands
# remotely

# If your central control node is in AWS in the same VPC, run this command:

cat aws_host_info.txt | awk {'print $3'} > all_nodes.txt

# If your central control node is NOT in AWS network space (e.g. your laptop), run this command:

cat aws_host_info.txt | awk {'print $4'} > all_nodes.txt

# These shell scripts are used for copying files to each host, and/or running commands on each host.
# Edit them so that $key points to the correct AWS ssh pem file.

chmod 755 rscp.sh
chmod 755 rc.sh

# ssh connect to each host to get rid of banner warnings

for i in `cat all_nodes.txt`; do ssh -oStrictHostKeyChecking=no -i your_aws.pem ubuntu@$i ls; done

# 6. Optional (recommended) run apt-get update && apt-get upgrade
# May as well be on the latest software and avoid any bugs.

./rc.sh a "sudo apt-get update && sudo apt-get upgrade -y"
# This will take a little while.

./rc.sh a "sudo reboot"

# 7. create DNS records for hosts in Route 53
cat aws_host_info.txt | awk {'print $2, $4'} > dns_script_hosts.txt


python3 name_a_host.py
# By default reads dns_script_hosts.txt



# 8. Run a script to name the hostname on each host
# This is done so that hostname matches DNS (set later) and brokers et al are happy
# Be sure to edit this file re: $public_ip or $private_ip for the SSH commands
# Also specify the correct ssh key file

./hostname_changer.sh

# 9.         Turn off ipv6 because it's a PITA
./rscp.sh a grub
./rc.sh a "sudo cp grub /etc/default/grub"
./rc.sh a "sudo update-grub"

./rc.sh a "sudo reboot"

# 10. Install openjdk and other packages as required

./rc.sh a "sudo apt-get install -y openjdk-11-jdk docker docker-compose"


# Add the ubuntu user to the docker group
./rc.sh a "sudo usermod -a -G docker ubuntu"

# 11. Get the GitHub repo on each host
./rc.sh a "git clone https://github.com/berthayes/cp-zeek

# 12. Run shell script to edit the docker-compose.yml file to reflect hostname
./rc.sh a "chmod 755 ~/cp-zeek/edit-docker-compose.sh"
./rc.sh a "sudo /bin/hostname | xargs ~/cp-zeek/edit-docker-compose.sh"


# 13. Start docker
./rc.sh a "docker-compose -f /home/ubuntu/cp-zeek/docker-compose.yml up -d"

# Need to restart Docker?
./rc.sh a "sudo systemctl enable docker"


#sudo systemctl start docker

# 14. (Optional) Copy a juicy pcap to cp-zeek/pcaps/
# Start reading the pcap and loop for a bzillion times
# Note that the zeek-streamer Docker image starts reading the zeek-streamer.pcap file automatically
./rc.sh a "docker exec -d zeek-streamer /usr/bin/tcpreplay --loop=1000000000 -i dummy0 /pcaps/some_other.pcap"

